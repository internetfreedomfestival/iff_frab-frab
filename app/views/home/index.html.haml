%section
  .page-header
    - if @open_schedule
      .pull-right
        =link_to "See our the upcoming schedule", public_schedule_index_path
    .pull-right
      =link_to "Return to your normal user portal", cfp_person_path(@person.id), class: "btn primary"
      =link_to "Public Schedule Test Environment", public_custom_path, class: "btn success"
    %h1 Welcome
  .row
    .span16
      - if @conference.rooms.count == 0
        .blank-slate
          %p
            Welcome, you seem to have just created this
            conference. A good first step would be to go
            to the <em>Conference Settings</em> tab above
            and add a room to this conference. This will
            be needed to schedule your program.
      - if @conference.events.count == 0 and @conference.call_for_participation.nil?
        .blank-slate
          %p
            This conference does not yet have any events.
            (Note that throughout the application, the
            generic term 'event' is used to refer to all
            sessions within your conference, no matter if
            they are talks, workshops, panels or something
            else entirely).
          %p
            Start adding events by clicking on the
            <em>Events</em> tab above. Or start a call for
            papers, to allow others to submit events for
            you to review.
  - if can? :manage, CallForParticipation
    .row
      .span16
        %h2
          Recent changes
          %small= link_to "more >>", recent_changes_path
        - if @versions.empty?
          .blank-slate
            %p
              Once you, or others start creating data for this
              conference, you will find who changed what here.
              This is especially interesting if you conduct a
              call for papers. In this case, this area allows
              you to quickly see if new submissions came in.
        - else
          = render "recent_changes/table"
          %p
  - @people = Person.all
  .row
    .span16
      %h2 Statistics
      - if @conference.events.count == 0
        .blank-slate
          %p
            Once you created some events for this conference,
            or gathered submissions through a call for papers,
            you will find some statistics about them here.
      - else
        %h4 Events by state
        %p
          = link_to "All", "#", id: "events_all_types"
          |
          = link_to "lectures only", "#", id: "events_lectures_only"
          |
          = link_to "workshops only", "#", id: "events_workshops_only"
          |
          = link_to "others only", "#", id: "events_others_only"
        #event_state_graph(style="width:600px;height:300px;")
        %table.zebra-stripe
          %thead
            %tr
              %th new
              %th review
              %th withdrawn
              %th accepting
              %th unconfirmed
              %th confirmed
              %th scheduled
              %th canceled
              %th rejecting
              %th rejected
              %th total
          %tbody
            %tr
              %td= @conference.events.where(state: :new).count
              %td= @conference.events.where(state: :review).count
              %td= @conference.events.where(state: :withdrawn).count
              %td= @conference.events.where(state: :accepting).count
              %td= @conference.events.where(state: :unconfirmed).count
              %td= @conference.events.where(state: :confirmed).count
              %td= @conference.events.where(state: :scheduled).count
              %td= @conference.events.where(state: :canceled).count
              %td= @conference.events.where(state: :rejecting).count
              %td= @conference.events.where(state: :rejected).count
              %td= @conference.events.count
      - if @conference.languages.count > 1
        %h4 Events by language
        %p
          = link_to "All", "#", id: "languages_all_events"
          |
          = link_to "Accepted only", "#", id: "languages_accepted_events_only"
        .row
          .span3
            %b English:
            = @conference.events.where(language: "en").count
          .span3
            %b Spanish:
            = @conference.events.where(language: "es").count
        #event_language_graph(style="width:400px;height:300px;")

      - if @conference.gender_breakdown.count > 1
        %h4 Events by gender
        %p
          = link_to "All", "#", id: "gender_all_events"
          |
          = link_to "Accepted only", "#", id: "gender_accepted_events_only"
        .row
          - @event_people = []
          - @people_from_events = []
          - @event_countries = Hash.new(0)
          - @presented_before = 0
          - @first_presentation = 0

          - @conference.events.each do |event|
            - @event_people << EventPerson.find_by(event_id: event.id)
            - if event.iff_before
              - if event.iff_before.include?("2015") || event.iff_before.include?("2016") || event.iff_before.include?("2017")
                - @presented_before += 1
              - else @first_presentation += 1
            - else
              - @first_presentation += 1
          - @event_people.each do |ep|
            - unless ep.nil?
              - person = Person.find_by(id: ep.person.id)
              - @people_from_events << Person.find_by(id: ep.person_id)
              - @event_countries[person.country_of_origin] += 1
          - @event_people_genders = Hash.new(0)
          - @people_from_events.each do |person|
            - @event_people_genders[person.gender] += 1
          .span3
            %b Female:
            = @event_people_genders["Female"]
          .span3
            %b Male:
            = @event_people_genders["Male"]
          .span3
            %b Gender Nonconforming:
            = @event_people_genders["Gender Nonconforming"]
          .span3
            %b Other:
            = @event_people_genders["Other"]
        #event_gender_graph(style="width:400px;height:300px;")
  / Inline logic for stats b/c difficult to pass variables via JSON
  - @dif_people = []
  - @volunteers = []
  - @countries = Hash.new(0)
  - @prof_back  = Hash.new(0)
  - @iff_before = Hash.new(0)
  - @event_people_proffesions = Hash.new(0)
  - @event_people_dif = Hash.new(0)

  - @people.each do |person|
    - if person.dif
      - @dif_people << person
    - if person.interested_in_volunteer == true
      - @volunteers << person
    - if person.country_of_origin.nil?
      - @countries["Not_Yet_Selected"] += 1
    - else @countries[person.country_of_origin] += 1
    - if person.professional_background.class == String
      - @prof_back[person.professional_background] += 1
    - else
      - person.professional_background.each do |prof|
        - @prof_back[prof] += 1 unless prof == ""
    - if person.iff_before.class == String
      - @iff_before[person.iff_before] += 1
    - else
      - person.iff_before.each do |year|
        - @iff_before[year] += 1
    - if !person.events.empty? && person.professional_background.class == String
      - @event_people_proffesions[person.professional_background] += 1
    - elsif !person.events.empty?
      -person.professional_background.each do |prof|
        - @event_people_proffesions[prof] += 1
    - if person.events
      - if person.dif
        - @event_people_dif['Applied for DIF'] += 1
  .row
    .span8
      %h2 Users
      %p
        %b= "Total Users:"
        = @people.count
      %p
        %b= "Total Attendees:"
        This has not been created yet
      %p
        %b= "Total Dif:"
        = @dif_people.count
      %p
        %b= "Total Volunteers:"
        = @volunteers.count
      %p
        %b Female:
        = @people.where(gender: "Female").count
      %p
        %b Male:
        = @people.where(gender: "Male").count
      %p
        %b Gender Nonconforming:
        = @people.where(gender: "Gender Nonconforming").count
      %p
        %b Other (Gender):
        = @people.where(gender: "Other").count

      <hr />
      %h2 Professional Background
      %p
        - @prof_back.each do |key, value|
          %p
            %b= key + ":"
            = value
      <hr />
      %h2 Returning Vs New
      %p
        - @iff_before = @iff_before.sort_by{|k, v| k}
        - @iff_before.each do |key, value|
          %p
            %b= key + ":" unless key == ""
            = value unless key == ""
      <hr />
      %h2 Events
      %h4 By Format
      - @formats = Hash.new(0)
      - @themes = Hash.new(0)
      - @conference.events.each do |event|
        - if event.track
          - @formats[event.track.name] += 1
        - @themes[event.event_type] += 1
      %p
        - @formats.each do |key, value|
          %p
            %b= key
            = value
      %h4 Events by Theme
      %p
        - @themes.each do |key, value|
          %p
            %b= key
            = value
      %h4 By Professional Background of Presenter
      - @event_people_proffesions.each do |key, value|
        %p
          %b= key + ":" unless key == ""
          = value unless key == ""
      %h4 Events by DIF
      %p
        %b Total Events:
        = @conference.events.count
      - @event_people_dif.each do |key, value|
        %p
          %b= key + ":"
          = value
      %h4 Presenters
      %p
        %b Already Presented:
        = @presented_before
      %p
        %b 1st Time Presenters:
        = @first_presentation
      %h4 Events By Country:
      - @event_countries ||= Hash.new(0)
      - @event_countries.each do |country, count|
        %p
          %b= country + ":"
          = count


    .span8
      %h2 Countries of Origin
      %p
        - @countries.each do |key, value|
          %p
            %b= key + ":"
            = value

    - @person_with_country = Person.all.map(&:country_of_origin)
    - @tickets_holders = Person.joins(:tickets).where(tickets: {status: "Completed"}).map(&:country_of_origin)
    - @tickets_all = Ticket.all
    - @people_with_tickets_completed = Person.joins(:tickets).where(tickets: {status: "Completed"})
    - @people_with_event = Person.joins(:event_people).where(event_people: {event_role: "speaker"})
    - @tickets_with_gender = Ticket.all.map(&:gender_pronoun)
    - @statistics_gender = Hash.new
    - @statistics_country = Hash.new
    - @statistics_roles = Hash.new
    - @statistics_speakers = Hash.new
    - @pronouns = Person::GENDER_PRONOUN
    - @countries = Person::COUNTRIES
    -# - @roles = EventPerson::ROLES


    .span8
      %h2 Tickets
      %p
        %h4 Total ticket holders
        = @tickets_all.count
      %p
        %h4 Gender balance of ticket holders:
        - @pronouns.each do |pronoun|
          - number = @tickets_with_gender.count{ |gender| gender == pronoun }
          - @statistics_gender[pronoun] = number
        - @statistics_gender.each do |key, value|
          - if value != 0
            %p
              %b= key + ":"
              = value
      %p
        %h4 Country breakdown of ticket holders:
        - @countries.each do |country|
          - number2 = @tickets_holders.count{ |person| person == country}
          - @statistics_country[country] = number2
        - @statistics_country.each do |key, value|
          - if value != 0
            %p
              %b= key + ":"
              = value
      %p
        %h4 How many ticket holders are speakers:
        %pre= @people_with_tickets_completed
        %pre= @people_with_event

        %pre= (@people_with_tickets_complete & @people_with_event)







:coffeescript
  update_languages_breakdown = (accepted_only = false) ->
    if accepted_only
      params = {"accepted_only": 1}
    else
      params = {}
    $.ajax(
      url: "#{language_breakdown_statistics_path}",
      type: "GET",
      dataType: "json",
      data: params,
      success: (data) ->
        $.plot($("#event_language_graph"), data, {series: {pie: {show: true}}})
    )

  update_gender_breakdown = (accepted_only = false) ->
    if accepted_only
      params = {"accepted_only": 1}
    else
      params = {}
    $.ajax(
      url: "#{gender_breakdown_statistics_path}",
      type: "GET",
      dataType: "json",
      data: params,
      success: (data) ->
        $.plot($("#event_gender_graph"), data, {series: {pie: {show: true}}})
    )

  update_events_breakdown = (type = "") ->
    if type
      params = {"type": type}
    else
      params = {}
    $.ajax(
      url: "#{events_by_state_statistics_path}",
      type: "GET",
      data: params,
      dataType: "json",
      success: (data) ->
        $.plot($("#event_state_graph"), data, {
          series: {
            bars: { show: true, barWidth: 1 }
          },
          xaxis: {
            ticks: [[0.5, "undecided"], [1.5,"accepted"], [2.5, "rejected"], [3.5, "withdrawn/canceled"]]
          }
        })
    )

  $ ->
    $("#events_all_types").click (event) ->
      update_events_breakdown()
    $("#events_lectures_only").click (event) ->
      update_events_breakdown("lectures")
    $("#events_workshops_only").click (event) ->
      update_events_breakdown("workshops")
    $("#events_others_only").click (event) ->
      update_events_breakdown("others")
    update_events_breakdown()

    $("#languages_all_events").click (event) ->
      update_languages_breakdown()
      event.preventDefault()
    $("#languages_accepted_events_only").click (event) ->
      update_languages_breakdown(true)
      event.preventDefault()
    update_languages_breakdown()

    $("#gender_all_events").click (event) ->
      update_gender_breakdown()
      event.preventDefault()
    $("#gender_accepted_events_only").click (event) ->
      update_gender_breakdown(true)
      event.preventDefault()
    update_gender_breakdown()
