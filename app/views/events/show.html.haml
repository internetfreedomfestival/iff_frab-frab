%section
  .page-header
    .pull-right
      - if can? :crud, @event
        = action_button "primary", "Edit event", edit_event_path(@event), hint: "Edit this event's data."
        = action_button "primary", "Edit people", edit_people_event_path(@event), hint: "Edit this event's data."
        - if @conference.ticket_type == 'integrated' and !@conference.bulk_notification_enabled and @conference.call_for_participation.present?
          - if @event.transition_possible? :accept
            = action_button "success", "Accept event", update_state_event_path(@event, transition: :accept, send_mail: true), method: :put, hint: "Accept this event. The speaker(s) will be notified of the acceptance via email. If they have access to the call for papers system, they will receive a link to confirm their attendance as well."
          - if @event.transition_possible? :reject
            = action_button "danger", "Reject event", update_state_event_path(@event, transition: :reject, send_mail: true), method: :put, confirm: "Are you sure?", hint: "Reject this event. The speaker(s) will be notified of the rejection via email."
        - if @event.transition_possible? :accept
          = action_button "success", "Accept event (no email)", update_state_event_path(@event, transition: :accept), method: :put, hint: "Accept this event without sending an automated email."
          / this was a custom button that lead to custom email path....temporarily disabled because the admin UI can handle this via settings/notifications
        / - if @event.transition_possible? :accept
        /   = action_button "success", "Accept event (Email)", update_state_with_email_event_path(@event, transition: :accept), method: :put, hint: "Accept this event and send an automated email."
        - if @event.transition_possible? :reject
          = action_button "danger", "Reject event (no email)", update_state_event_path(@event, transition: :reject), method: :put, confirm: "Are you sure?", hint: "Reject this event without sending an automated email."
        - if @event.transition_possible? :confirm
          = action_button "", "Confirm event", update_state_event_path(@event, transition: :confirm), method: :put, hint: "Confirm that the speaker(s) will be present and that the event will actually take place."
        - if @event.transition_possible? :cancel
          = action_button "danger", "Cancel event", update_state_event_path(@event, transition: :cancel), method: :put, hint: "Mark this event as cancelled. Usually this means that the speakers had to cancel their appearance."
        - if @event.transition_possible? :notify
          = action_button "", "Custom notification", custom_notification_event_path(event_id: @event), method: :post, hint: "Add custom notifications for all speakers. These will be sent instead of the default notification on next bulk notification run. Modify them in 'Edit people' tab."
        - if @conference.ticket_server_enabled?
          - unless @event.remote_ticket?
            = action_button "primary", "Add Ticket", tickets_path(event_id: @event), method: :post, title: "Create a ticket for this event."
    %h1 Event
    %h2 #{@event.title}
  %ul.tabs
    %li.active= link_to Event.model_name.human, @event
    %li= link_to Person.model_name.human, people_event_path(@event)
    %li= link_to EventRating.model_name.human, event_event_rating_path(@event)
    %li= link_to EventFeedback.model_name.human, event_event_feedbacks_path(@event)
  .row
    .span16
      - @event.conflicts.each do |conflict|
        = render "conflicts/#{conflict.conflict_type}", conflict: conflict
  .row
    .span6
      %h2= t(:basic_information)
      %p
        %b= "Title:"
        = @event.title
      %p
        %b= "Goal of the session:"
        = @event.subtitle
      %p
        %b= Event.human_attribute_name(:track) + ':'
        = @event.track_name
      %p
        %b= "Other Presenters:"
        = @event.other_presenters
      %p
        %b= "Theme:"
        = @event.event_type
      %p
        %b= "Public type:"
        = @event.public_type
      %p
        %b= "Target audience:"
        = @event.target_audience
      %p
        %b= "Format:"
        = @event.track

      - if can? :crud, Event
        %p
          %b= Event.human_attribute_name(:state) + ':'
          = @event.state
      - unless @event.ticket.nil? or @event.ticket.remote_ticket_id.nil?
        %p
          %b Ticket:
          -if @conference.ticket_server.nil?
            = @event.ticket.remote_ticket_id
          -else
            = link_to @event.ticket.remote_ticket_id, get_ticket_view_url( @event.ticket.remote_ticket_id ), target: "_blank"
      %p
        %b Presented IFF Before?:
        = @event.iff_before.to_sentence
      %p
        %b Etherpad URL:
        = @event.etherpad_url
      %p
        %b Language:
        = @event.language
      %p
        %b Skill Level:
        = @event.skill_level
      %p
        %b Average audience feedback:
        = number_with_precision @event.average_feedback, precision: 1
    .span6
      %h2= EventPerson.model_name.human(count: 2)
      %p= @event.speakers.map{ |p| link_to p.public_name, p}.join(", ").html_safe
      %p
        %b Contact phone number:
        = @event.phone_number
      %h2= "Description:"
      = simple_format @event.description
      %p
        %b= "Desired Outcome:"
        = @event.desired_outcome
      %p
        %b Instructions:
        = @event.instructions
      %h2 Scheduling
      - if can? :crud, Event
        %p
          %b Start time:
          = event_start_time
      %p
        %b= "Room:"
        = @event.room.try(:name)
      -if @event.conference != @conference
        %b Conference:
        = @event.conference.acronym
      %p
        %b= "Time Slots:"
        = @event.time_slots
      %p
        %b= "Need projector:"
        -if @event.projector
          Yes
        -else
          No

    / .span4
    /   = image_box @event.logo, :large
  %section
    .row
      .span10
        .span10
        %h2 DIF
        %p
          %b Need travel assistance to attend the #{@conference.alt_title}
          = @event.travel_assistance
        %p
          %b To which group less representative belongs
          = @event.group
        %p
          %b Who should receive the recipient stipend
          = @event.recipient_travel_stipend
        %p
          %b Travel Support
          - if @event.travel_support
            = @event.travel_support.to_sentence
        %p
          %b Past travel assistance
          - if @event.past_travel_assistance
            = @event.past_travel_assistance.to_sentence
  .row
    .span10
      %p
        - if @event.links.any?
          %b Links:
          %br/
          - @event.links.each do |link|
            = link_to link.title, fix_http_proto(link.url)
            %br/
      %p
        - if @event.event_attachments.any?
          %b #{t('public.schedule.event.files')}:
          %ul
            - @event.event_attachments.each do |attachment|
              %li= link_to attachment.link_title, attachment.attachment.url
  .row
    .span16
      %h2 Notes
  .row
    .span8
      %p
        %b Submission Notes(user and admin):
        = @event.submission_note
      %p
        %b Public:
        = check_box_tag :public, @event.public, @event.public, disabled: true
      %p
        %b Abstract:
        = simple_format @event.abstract
      %p
        %b= Event.human_attribute_name(:tech_rider) + ':'
        = @event.tech_rider
    - if can? :crud, @event
      .span8
        %p
          %b Notes(admin):
          = @event.note
